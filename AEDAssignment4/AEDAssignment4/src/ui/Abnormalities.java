/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.House;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author adepu
 */
    
public class Abnormalities extends javax.swing.JPanel {

    /**
     * Creates new form VitalSignsHistory1
     */
    PersonDirectory personHistory;
    DefaultTableModel defaultTableModel;
    public Abnormalities(PersonDirectory personHistory) {
        initComponents();
        this.personHistory = personHistory;
        defaultTableModel = (DefaultTableModel) tblAbnormalities.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnsearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtpatientidsearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAbnormalities = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        minSystolicBp = new javax.swing.JTextField();
        maxSystolicBp = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        minDiastolicBp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        maxDiastolicBp = new javax.swing.JTextField();
        minSugar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        maxSugar = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        btnViewAbnormalities = new javax.swing.JButton();

        jLabel1.setBackground(new java.awt.Color(153, 153, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Abnormalities");

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Patient ID");

        tblAbnormalities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Person Name", "Blood Pressue", "Sugar", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAbnormalities);

        jLabel3.setText("Systolic BP (Min to Max):");

        jLabel4.setText("Diastolic BP (Min to Max):");

        jLabel5.setText("Sugar (Min to Max):");

        jLabel6.setText("to");

        jLabel7.setText("to");

        jLabel8.setText("to");

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnViewAbnormalities.setText("View Abnormalities");
        btnViewAbnormalities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAbnormalitiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtpatientidsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnView))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(minSystolicBp, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                                    .addComponent(minDiastolicBp)
                                    .addComponent(minSugar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxSystolicBp, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxDiastolicBp))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxSugar))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(btnsearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(346, 346, 346)
                        .addComponent(btnViewAbnormalities)))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minSystolicBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxSystolicBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(minDiastolicBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(maxDiastolicBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minSugar)
                            .addComponent(jLabel8)
                            .addComponent(maxSugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnsearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtpatientidsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewAbnormalities)
                .addGap(112, 112, 112))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // TODO add your handling code here:
        String minSystolicBP = minSystolicBp.getText();
        String maxSystolicBP = maxSystolicBp.getText();
        String minDiastolicBP = minDiastolicBp.getText();
        String maxDiastolicBP = maxDiastolicBp.getText();
        String minPulseRate = minSugar.getText();
        String maxPulseRate = maxSugar.getText();
        
        
        if(minSystolicBP.equals("") || maxSystolicBP.equals("") || minDiastolicBP.equals("") || maxDiastolicBP.equals("") || minPulseRate.equals("") || maxPulseRate.equals("")){
            JOptionPane.showMessageDialog(this, "Please Enter All Fields!","Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        defaultTableModel.setRowCount(0);
        for(Person person: personHistory.getPersonDirectory()){
            House house = person.getHouse();
            

                EncounterHistory eh = person.getEncounteDirectory();
                for(Encounter encounter : eh.getEncounterHistory())
                {
                    if(checkAbnormality(encounter, minSystolicBP, maxSystolicBP, minDiastolicBP, maxDiastolicBP, minPulseRate, maxPulseRate))
                    {
                        displayEcounter(encounter, person);
                    }
                }
            
        }
    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        String ID = txtpatientidsearch.getText();
        if(ID.equals("")){
            JOptionPane.showMessageDialog(this, "Please Enter Search ID!","Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int id = Integer.parseInt(ID);
        
        defaultTableModel.setRowCount(0);
        for(Person person: personHistory.getPersonDirectory()){
            House house = person.getHouse();
            

                EncounterHistory eh = person.getEncounteDirectory();
                for(Encounter encounter : eh.getEncounterHistory())
                {
                    if(encounter.getID() == id)
                    {
                        displayEcounter(encounter, person);
                    }
                }
            
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnViewAbnormalitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAbnormalitiesActionPerformed
        // TODO add your handling code here:
        defaultTableModel.setRowCount(0);
        for(Person person: personHistory.getPersonDirectory()){
            House house = person.getHouse();
            

                EncounterHistory eh = person.getEncounteDirectory();
                for(Encounter encounter : eh.getEncounterHistory())
                {
                    if(checkAbnormality(encounter, "70", "140", "70", "140", "90", "140"))
                    {
                        displayEcounter(encounter, person);
                    }
                }
            
        }
    }//GEN-LAST:event_btnViewAbnormalitiesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnViewAbnormalities;
    private javax.swing.JButton btnsearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxDiastolicBp;
    private javax.swing.JTextField maxSugar;
    private javax.swing.JTextField maxSystolicBp;
    private javax.swing.JTextField minDiastolicBp;
    private javax.swing.JTextField minSugar;
    private javax.swing.JTextField minSystolicBp;
    private javax.swing.JTable tblAbnormalities;
    private javax.swing.JTextField txtpatientidsearch;
    // End of variables declaration//GEN-END:variables
private boolean checkAbnormality(Encounter encounter, String minSystolicBP, String maxSystolicBP, String minDiastolicBP, String maxDiastolicBP, String minPulseRate, String maxPulseRate) {
        VitalSigns vitalsign = encounter.getVitalSign();
        
        if( !minSystolicBP.equals("") && vitalsign.getSystolic_bp()< Integer.parseInt(minSystolicBP)) return true;
        if( !maxSystolicBP.equals("") && vitalsign.getSystolic_bp()> Integer.parseInt(maxSystolicBP)) return true;
        if( !minDiastolicBP.equals("") && vitalsign.getDiastolic_bp()< Integer.parseInt(minDiastolicBP)) return true;
        if( !maxDiastolicBP.equals("") && vitalsign.getDiastolic_bp() > Integer.parseInt(maxDiastolicBP)) return true;
        if( !minPulseRate.equals("") && vitalsign.getSugar()< Integer.parseInt(minPulseRate)) return true;
        if( !maxPulseRate.equals("") && vitalsign.getSugar()> Integer.parseInt(maxPulseRate)) return true;
        return false;
    }

    private void displayEcounter(Encounter encounter, Person person) {
         House house = person.getHouse();
        VitalSigns vitalsign = encounter.getVitalSign();
        LocalDate localdate = encounter.getDate();
        String date = localdate.getMonth()+" "+localdate.getDayOfMonth()+", "+localdate.getYear();
        Object[] obj = {person.getID(), person.getPersonName(),vitalsign.getSystolic_bp()+"/"+vitalsign.getDiastolic_bp(),vitalsign.getSugar(),house.getCommunityName().getCommunityName()};
        defaultTableModel.addRow(obj);
}
}
